
  * Strategy Pattern 이란?
 - 알고리즘을 구현한 부분을 모두 교환할 수 있다. 
   알고리즘(전략, 작전, 방책)을 빈틈없이 교체해서 같은 문제를 다른 방법으로도
   쉽게 해결할 수 있도록 도와주는 패턴. 
   
   
  * Strategy Pattern 의 등장인물
  
 - Strategy(전략)의 역할
    Strategy 전략을 이용하기 위한 인터페이스(API)를 결정.
    (Strategy 인터페이스가 이 역할)
    
 - ConcreteStrategy(구체적인 전략)의 역할
    Strategy의 인터페이스(API)를 실제로 구현.
    구체적인 전략(작전, 방책, 방법, 알고리즘)을 실제로 프로그래밍 함.
    (WinningStrategy 클래스와 ProbStrategy 클래스가 이 역할)
    
 - Context(문맥)
    Strategy을 이용하는 역할.
    ConcreteStrategy의 인스턴스를 가지고 있으며 필요에 따라 그것을 이용.
    (Strategy의 인터페이스(API)를 호출)
    (Player 클래스가 이 역할)
    
    
  * Strategy Pattern 의 특징
 - Strategy 패턴을 사용하면 Strategy 역할의 인터페이스(API)를 변경하지 않도록 주의하고
   ConcreteStrategy의 역할만 수정.
   '위임!'이라는 느슨한 연결을 사용하고 있으므로 알고리즘을 용이하게 교환할 수 있다.  