
* Builder Pattern 이란?
- 전체를 구성하고 있는 각 부분을 만들고 단계를 밟아 만들어 나간다.
  구조를 가진 인스턴스를 쌓아올리는 패턴.
  
- Main 클래스는 Builder 클래스의 메소드를 모릅니다(호출하지 않는다).
  Main 클래스는 Director 클래스의 construct 메소드만을 호출한다. 그러면 Director
  클래스 안에서 조용히 일이 진행되고(Main클래스를 신경쓰지 않고) 문서가 완성.
  
  한편, Director 클래스가 알고 있는 것은 Builder 클래스이다. 
  Director 클래스는 Builder 클래스의 메소드를 사용해서 문서를 구축해야 한다.
  그러나 Director 클래스는 자신이 실제로 이용하는 클래스가 무엇인지 모른다.
  그렇기 때문에 교체할 수 있다. 모르기 때문에 교한이 가능하고, 
  교체가 가능하기 때문에 부품으로서 가치가 높다. (==> 교환가능성)
  
  

* Builder Pattern 의 등장인물

  - Builder(건축자)의 역할
      인스턴스를 생성하기 위한 인터페이스(API)를 결정.
      Builder 역할에는 인스턴스의 각 부분을 만들기 위한 메소드가 준비
      (Builder 클래스가 이 역할)  
      
  - ConcreteBuilder(구체적인 건축자)의 역할
      BUilder 역할의 인터페이스(API)를 구현하고 있는 클래스.
      실제 인스턴스 작성으로 호출되는 메소드가 여기에 정의, 최종적인 결과를 얻기 위한 메소드 준비.
      (TextBuilder 클래스나 HTMLBuilder 클래스가 이 역할)
      
  - Director(감독자)의 역할
      Builder 역할의 인터페이스(API)를 사용해서 인스턴스를 생성.
      ConcreteBuilder 역할에 의존한 프로그래밍은 수행하지 않는다.
      ConcreteBuilder 역할과 관계없이 제대로 기능하도록 Builder 역할의 메소드만 사용.
      (Director 클래스가 이 역할)
      
  - Client(의뢰인)의 역할
      Builder 패턴을 이용하는 역할.
      (Main 클래스가 이 역할)