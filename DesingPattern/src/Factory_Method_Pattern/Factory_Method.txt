
  * Factory Method Pattern ?
 - Template Method 패턴을 인스턴스 생성의 장면에 적용한 것.
   인스턴스를 만드는 방법은 상위 클래스에서,(구체적인 클래스 이름은 결정 X) 
   구체적인 내용은 하위 클래스에서 수행.
   즉, 인스턴스 생성을 위한 골격(framework)와 실제 인스턴스 생성 클래스 분리.
   
   
 * Factory Method Pattern의 등장인물
 
    - Product(제품)의 역할 
        framework쪽에 포함. 이 패턴에서 생성되는 인스턴스가 가져야 할 
                            인터페이스(API)를 결정하는 것은 추상 클래스.
        구체적인 내용은 하위 클래스의 ConcreteProduct 역할이 결정.
        (Product 클래스가 이 역할을 수행.)
        
    - Creator(작성자)의 역할
        Product 역할을 생성하는 추상 클래스는 framework쪽에 가깝다.
        구체적인 내용은 하위클래스의 ConcreteCreator 역할이 결정.
        Creator 역할이 가지고 있는 정보는 
              Product 역할과 
              인스턴스 생성의 메소드를 호출하면 Product가 생성된다는 것 뿐. 
        new 를 사용해서 실제 인스턴스 생성하는 대신, 인스턴스 생성을 위한 
        메소드를 호출해서 구체적인 클래스 이름에 의한 속박에서 상위 클래스를
        자유롭게 만듭니다.              
        (Factory 클래스가 이 역할을 수행.)
        
    - ConcreteProduct(구체적인 제품)의 역할
        구체적인 제품을 결정
        (IDCard 클래스가 이 역할을 수행)
        
    - ConcreteCreator(구체적인 작성자)의 역할
        구체적인 제품을 만드는 클래스를 결정
        (IDCardFactory 클래스가 이 역할을 수행.)
        
  
  * framework의 구체적인 내용
      동일한 framework를 사용해 전혀 다른 '제품' 과 '공장'을 만들 수 있다.
      framework 패키지 안에서는 idcard 패키지를 import 하지 않는다.
      따라서 새로운 클래스를 동일한 framework에서 생성할 경우에도 framework
      패키지의 내용을 수정할 필요가 없습니다.
      즉, 'framework 패키지는 idcard 패키지에 의존하고 있지 않다.'
      
      
        